AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  auto-tagging-with-mds

Parameters:
  Version:
    Type: String
    Default: prod

Resources:
  AutoTaggingApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: auto-tagging
      StageName: !Ref Version
      Cors:
        AllowMethods: "'DELETE,GET,OPTIONS,POST,PUT'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"  
      # GatewayResponses:
      #   UNAUTHORIZED:
      #     ResponseParameters:
      #       Headers:
      #         Access-Control-Allow-Origin: "'*'"
      #         Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
      #         Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
      # Auth:
      #   Authorizers:
      #     CognitoAuthorizer:
      #       UserPoolArn: !GetAtt "ATUserPool.Arn"  

#   GatewayResponseDefaultUnauthorized:
#     Type: AWS::ApiGateway::GatewayResponse
#     Properties:
#       ResponseParameters:
#         gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#         gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
#         gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,POST,PUT'"
#       ResponseType: UNAUTHORIZED
#       StatusCode: "401"
#       RestApiId: !Ref AutoTaggingApi



# # Cognito ##
#   ATUserPool:
#     Type: AWS::Cognito::UserPool
#     Properties:
#       AdminCreateUserConfig:
#         AllowAdminCreateUserOnly: false
#       UserPoolName: AutoTagging-prod  
#       UsernameAttributes:
#       - email
#       AutoVerifiedAttributes:
#       - email
#       Policies:
#         PasswordPolicy:
#           MinimumLength: 6
#           RequireLowercase: true
#           RequireNumbers: false
#           RequireSymbols: true
#           RequireUppercase: true

#   UserPoolClient:
#     Type: AWS::Cognito::UserPoolClient
#     Properties:
#       UserPoolId: !Ref ATUserPool
#       GenerateSecret: false
#       ExplicitAuthFlows:
#       - USER_PASSWORD_AUTH

#   # check if it is requiered, auto confirm is better
  



#####################################

  MDSTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: uuid
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TableName:  at_mds-prod
      GlobalSecondaryIndexes:
      - IndexName: uuid-index
        KeySchema:
        - AttributeName: uuid
          KeyType: HASH
        Projection:
          ProjectionType: ALL

  ServiceCreateFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/service/create
      Handler: create
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBFullAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/services
            Method: POST
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  ServiceIndexFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/service/index
      Handler: index
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/services
            Method: GET
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  ServiceShowFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/service/show
      Handler: show
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/services/{service_name}
            Method: GET
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  ServiceUpdateFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/service/update
      Handler: update
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBFullAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/services/{service_name}
            Method: PUT
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  ServiceDeleteFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/service/delete
      Handler: delete
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBFullAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/services/{service_name}
            Method: DELETE
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable
     
############################################
  CompanyCreateFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/company/create
      Handler: create
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBFullAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/companies
            Method: POST
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  CompanyIndexFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/company/index
      Handler: index
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/companies
            Method: GET
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  CompanyShowFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/company/show
      Handler: show
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/companies/{company_name}
            Method: GET
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  CompanyUpdateFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/company/update
      Handler: update
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBFullAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/companies/{company_name}
            Method: PUT
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  companyDeleteFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/company/delete
      Handler: delete
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBFullAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/companies/{company_name}
            Method: DELETE
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

############################################

  TagCreateFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/tag/create
      Handler: create
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBFullAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/tags
            Method: POST
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  TagIndexFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/tag/index
      Handler: index
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/tags
            Method: GET
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  TagShowFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/tag/show
      Handler: show
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBReadOnlyAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/tags/{tag_key}
            Method: GET
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

  # TagUpdateFunction:
  #   Type: AWS::Serverless::Function 
  #   Properties:
  #     CodeUri: api/tag/update
  #     Handler: update
  #     Runtime: go1.x
  #     Tracing: Active 
  #     Policies: AmazonDynamoDBFullAccess
  #     Events:
  #       CatchAll:
  #         Type: Api 
  #         Properties:
  #           Path: /api/v1/tags/{tag_id}
  #           Method: PUT
  #           RestApiId: !Ref AutoTaggingApi
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref MDSTable

  TagDeleteFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: api/tag/delete
      Handler: delete
      Runtime: go1.x
      Tracing: Active 
      Policies: AmazonDynamoDBFullAccess
      Events:
        CatchAll:
          Type: Api 
          Properties:
            Path: /api/v1/tags/{tag_key}/value/{tag_value}
            Method: DELETE
            RestApiId: !Ref AutoTaggingApi
      Environment:
        Variables:
          TABLE_NAME: !Ref MDSTable

############################################

  # RuleCreateFunction:
  #   Type: AWS::Serverless::Function 
  #   Properties:
  #     CodeUri: api/rule/create
  #     Handler: create
  #     Runtime: go1.x
  #     Tracing: Active 
  #     Policies: AmazonDynamoDBFullAccess
  #     Events:
  #       CatchAll:
  #         Type: Api 
  #         Properties:
  #           Path: /api/v1/rules
  #           Method: POST
  #           RestApiId: !Ref AutoTaggingApi
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref MDSTable

  # RuleIndexFunction:
  #   Type: AWS::Serverless::Function 
  #   Properties:
  #     CodeUri: api/rule/index
  #     Handler: index
  #     Runtime: go1.x
  #     Tracing: Active 
  #     Policies: AmazonDynamoDBReadOnlyAccess
  #     Events:
  #       CatchAll:
  #         Type: Api 
  #         Properties:
  #           Path: /api/v1/rules
  #           Method: GET
  #           RestApiId: !Ref AutoTaggingApi
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref MDSTable

  # RuleShowFunction:
  #   Type: AWS::Serverless::Function 
  #   Properties:
  #     CodeUri: api/rule/show
  #     Handler: show
  #     Runtime: go1.x
  #     Tracing: Active 
  #     Policies: AmazonDynamoDBReadOnlyAccess
  #     Events:
  #       CatchAll:
  #         Type: Api 
  #         Properties:
  #           Path: /api/v1/rules/{rule_id}
  #           Method: GET
  #           RestApiId: !Ref AutoTaggingApi
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref MDSTable

  # RuleUpdateFunction:
  #   Type: AWS::Serverless::Function 
  #   Properties:
  #     CodeUri: api/rule/update
  #     Handler: update
  #     Runtime: go1.x
  #     Tracing: Active 
  #     Policies: AmazonDynamoDBFullAccess
  #     Events:
  #       CatchAll:
  #         Type: Api 
  #         Properties:
  #           Path: /api/v1/rules/{rule_id}
  #           Method: PUT
  #           RestApiId: !Ref AutoTaggingApi
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref MDSTable

  # RuleDeleteFunction:
  #   Type: AWS::Serverless::Function 
  #   Properties:
  #     CodeUri: api/rule/delete
  #     Handler: delete
  #     Runtime: go1.x
  #     Tracing: Active 
  #     Policies: AmazonDynamoDBFullAccess
  #     Events:
  #       CatchAll:
  #         Type: Api 
  #         Properties:
  #           Path: /api/v1/rules/{rule_id}
  #           Method: DELETE
  #           RestApiId: !Ref AutoTaggingApi
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref MDSTable   

