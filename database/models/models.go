package models

import (
	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-sdk-go/service/dynamodb"
)

type Tables struct {
	MDSTable string
}

type DynamoDBEvent struct {
	Records []DynamoDBEventRecord `json:"Records"`
}

type DynamoDBEventRecord struct {
	AWSRegion      string                       `json:"awsRegion"`
	Change         DynamoDBStreamRecord         `json:"dynamodb"`
	EventID        string                       `json:"eventID"`
	EventName      string                       `json:"eventName"`
	EventSource    string                       `json:"eventSource"`
	EventVersion   string                       `json:"eventVersion"`
	EventSourceArn string                       `json:"eventSourceARN"`
	UserIdentity   *events.DynamoDBUserIdentity `json:"userIdentity,omitempty"`
}

type DynamoDBStreamRecord struct {
	ApproximateCreationDateTime events.SecondsEpochTime `json:"ApproximateCreationDateTime,omitempty"`
	// changed to map[string]*dynamodb.AttributeValue
	Keys map[string]*dynamodb.AttributeValue `json:"Keys,omitempty"`
	// changed to map[string]*dynamodb.AttributeValue
	NewImage map[string]*dynamodb.AttributeValue `json:"NewImage,omitempty"`
	// changed to map[string]*dynamodb.AttributeValue
	OldImage       map[string]*dynamodb.AttributeValue `json:"OldImage,omitempty"`
	SequenceNumber string                              `json:"SequenceNumber"`
	SizeBytes      int64                               `json:"SizeBytes"`
	StreamViewType string                              `json:"StreamViewType"`
}

type Service struct {
	ServiceName   string     `json:"service_name"`
	Description   string     `json:"description"`
	MoreAbout     string     `json:"more_about"`
	Category      []Category `json:"category"`
	Like          int        `json:"like"`
	Stage         string     `json:"stage"`
	TargetSegment string     `json:"target_segment"`
	Deployment    string     `json:"deployment"`
	BusinessModel string     `json:"business_model"`
	Pricing       string     `json:"pricing"`
	Location      string     `json:"location"`
	CreatedAt     string     `json:"created_at"`
	UpdatedAt     string     `json:"updated_at"`
}

type Category struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// ServiceUUID auto generated and used to update service data.
// If service name is updated by user, we will not be able to update it in DB.
// So we will delete onld entry and insert updated entry with same uuid
type ServiceRequest struct {
	PK            string     `json:"PK"`           //auto generated by BE
	ServiceUUID   string     `json:"service_uuid"` //auto generated by BE for create, sent by FE for update
	ServiceName   string     `json:"service_name"`
	Description   string     `json:"description"`
	MoreAbout     string     `json:"more_about"`
	Category      []Category `json:"category"`
	Like          int        `json:"like"`
	Stage         string     `json:"stage"`
	TargetSegment string     `json:"target_segment"`
	Deployment    string     `json:"deployment"`
	BusinessModel string     `json:"business_model"`
	Pricing       string     `json:"pricing"`
	Location      string     `json:"location"`
	CreatedAt     string     `json:"created_at"`
	UpdatedAt     string     `json:"updated_at"`
}

type ServiceResponse struct {
	ServiceUUID   string     `json:"service_uuid"`
	ServiceName   string     `json:"service_name"`
	Description   string     `json:"description"`
	MoreAbout     string     `json:"more_about"`
	Category      []Category `json:"category"`
	Like          int        `json:"like"`
	Stage         string     `json:"stage"`
	TargetSegment string     `json:"target_segment"`
	Deployment    string     `json:"deployment"`
	BusinessModel string     `json:"business_model"`
	Pricing       string     `json:"pricing"`
	Location      string     `json:"location"`
	CreatedAt     string     `json:"created_at"`
	UpdatedAt     string     `json:"updated_at"`
}

type Company struct {
	PK          string   `json:"PK"` //auto generated
	CompanyUUID string   `json:"company_uuid"`
	CompanyName string   `json:"company_name"`
	Description string   `json:"description"`
	ServiceList []string `json:"service_list"` // holds service uuid
	CreatedAt   string   `json:"created_at"`
	UpdatedAt   string   `json:"updated_at"`
}

type CompanyRequest struct {
	PK          string     `json:"PK"`           //auto generated
	CompanyUUID string     `json:"company_uuid"` //auto generated by BE for create, sent by FE for update
	CompanyName string     `json:"company_name"`
	Description string     `json:"description"`
	ServiceList []Services `json:"service_list"` // FE sends only service uuid list
	CreatedAt   string     `json:"created_at"`
	UpdatedAt   string     `json:"updated_at"`
}

type CompanyResponse struct {
	CompanyUUID string     `json:"company_uuid"`
	CompanyName string     `json:"company_name"`
	Description string     `json:"description"`
	ServiceList []Services `json:"service_list"`
	CreatedAt   string     `json:"created_at"`
	UpdatedAt   string     `json:"updated_at"`
}

type Services struct {
	ServiceUUID string `json:"service_uuid"`
	ServiceName string `json:"service_name"`
}

type TagRequest struct {
	PK        string `json:"PK"` //auto generated
	Key       string `json:"key"`
	Value     string `json:"value"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type TagCreateRequest struct {
	PK        string `json:"PK"`    //auto generated
	Key       string `json:"key"`   // need(1/2)
	Value     string `json:"value"` // need(2/2), add 1 at a time
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type TagResponse struct {
	Key       string `json:"key"`
	Value     string `json:"value"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type TagListResponse struct {
	Key       string   `json:"key"`
	Values    []string `json:"values"`
	CreatedAt string   `json:"created_at"`
	UpdatedAt string   `json:"updated_at"`
}

type Tags struct {
	TagValueUUID string `json:"tag_uuid"`
	TagValue     string `json:"tag_name"`
}
